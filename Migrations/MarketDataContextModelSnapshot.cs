// <auto-generated />
using System;
using KiteMarketDataService.Worker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KiteMarketDataService.Worker.Migrations
{
    [DbContext(typeof(MarketDataContext))]
    partial class MarketDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KiteMarketDataService.Worker.Models.CircuitLimit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("InstrumentToken")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LowerCircuitLimit")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Strike")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("TradingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradingSymbol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("UpperCircuitLimit")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentToken");

                    b.HasIndex("TradingDate");

                    b.HasIndex("TradingDate", "TradingSymbol");

                    b.ToTable("CircuitLimits");
                });

            modelBuilder.Entity("KiteMarketDataService.Worker.Models.CircuitLimitChangeRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("IndexClosePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("IndexHighPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("IndexLastPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("IndexLowPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("IndexOpenPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<long>("InstrumentToken")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("NewClosePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("NewHighPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("NewLC")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("NewLastPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("NewLowPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("NewOpenPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("NewUC")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<decimal?>("PreviousClosePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("PreviousHighPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("PreviousLC")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("PreviousLastPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("PreviousLowPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("PreviousOpenPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("PreviousUC")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Strike")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("TradingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradingSymbol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeTime");

                    b.HasIndex("ChangeType");

                    b.HasIndex("InstrumentToken");

                    b.HasIndex("TradingDate");

                    b.ToTable("CircuitLimitChanges");
                });

            modelBuilder.Entity("KiteMarketDataService.Worker.Models.DailyMarketSnapshot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("ClosePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HighPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<long>("InstrumentToken")
                        .HasColumnType("bigint");

                    b.Property<decimal>("LastPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("LowPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("LowerCircuitLimit")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("NetChange")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("OpenInterest")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("OpenPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("SnapshotTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SnapshotType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Strike")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("TradingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradingSymbol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("UpperCircuitLimit")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentToken");

                    b.HasIndex("SnapshotTime");

                    b.HasIndex("SnapshotType");

                    b.HasIndex("TradingDate");

                    b.ToTable("DailyMarketSnapshots");
                });

            modelBuilder.Entity("KiteMarketDataService.Worker.Models.Instrument", b =>
                {
                    b.Property<long>("InstrumentToken")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("ExchangeToken")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Expiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstrumentType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("LastPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LotSize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Strike")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TickSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TradingSymbol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("InstrumentToken");

                    b.HasIndex("Exchange");

                    b.HasIndex("Expiry");

                    b.HasIndex("InstrumentType");

                    b.HasIndex("TradingSymbol");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("KiteMarketDataService.Worker.Models.MarketQuote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AveragePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("BuyOrders1")
                        .HasColumnType("int");

                    b.Property<int?>("BuyOrders2")
                        .HasColumnType("int");

                    b.Property<int?>("BuyOrders3")
                        .HasColumnType("int");

                    b.Property<int?>("BuyOrders4")
                        .HasColumnType("int");

                    b.Property<int?>("BuyOrders5")
                        .HasColumnType("int");

                    b.Property<decimal?>("BuyPrice1")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("BuyPrice2")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("BuyPrice3")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("BuyPrice4")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("BuyPrice5")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<long>("BuyQuantity")
                        .HasColumnType("bigint");

                    b.Property<long?>("BuyQuantity1")
                        .HasColumnType("bigint");

                    b.Property<long?>("BuyQuantity2")
                        .HasColumnType("bigint");

                    b.Property<long?>("BuyQuantity3")
                        .HasColumnType("bigint");

                    b.Property<long?>("BuyQuantity4")
                        .HasColumnType("bigint");

                    b.Property<long?>("BuyQuantity5")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ClosePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HighPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<long>("InstrumentToken")
                        .HasColumnType("bigint");

                    b.Property<long?>("InstrumentToken1")
                        .HasColumnType("bigint");

                    b.Property<decimal>("LastPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<long>("LastQuantity")
                        .HasColumnType("bigint");

                    b.Property<decimal>("LowPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("LowerCircuitLimit")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("NetChange")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("OiDayHigh")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("OiDayLow")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("OpenInterest")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("OpenPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("QuoteTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SellOrders1")
                        .HasColumnType("int");

                    b.Property<int?>("SellOrders2")
                        .HasColumnType("int");

                    b.Property<int?>("SellOrders3")
                        .HasColumnType("int");

                    b.Property<int?>("SellOrders4")
                        .HasColumnType("int");

                    b.Property<int?>("SellOrders5")
                        .HasColumnType("int");

                    b.Property<decimal?>("SellPrice1")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("SellPrice2")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("SellPrice3")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("SellPrice4")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("SellPrice5")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<long>("SellQuantity")
                        .HasColumnType("bigint");

                    b.Property<long?>("SellQuantity1")
                        .HasColumnType("bigint");

                    b.Property<long?>("SellQuantity2")
                        .HasColumnType("bigint");

                    b.Property<long?>("SellQuantity3")
                        .HasColumnType("bigint");

                    b.Property<long?>("SellQuantity4")
                        .HasColumnType("bigint");

                    b.Property<long?>("SellQuantity5")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Strike")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<TimeSpan>("TradeTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("TradingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradingSymbol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("UpperCircuitLimit")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("InstrumentToken");

                    b.HasIndex("InstrumentToken1");

                    b.HasIndex("OptionType");

                    b.HasIndex("QuoteTimestamp");

                    b.HasIndex("Strike");

                    b.HasIndex("TradingDate");

                    b.HasIndex("TradingSymbol");

                    b.HasIndex("TradingDate", "TradingSymbol", "QuoteTimestamp");

                    b.ToTable("MarketQuotes");
                });

            modelBuilder.Entity("KiteMarketDataService.Worker.Models.MarketQuote", b =>
                {
                    b.HasOne("KiteMarketDataService.Worker.Models.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentToken1");

                    b.Navigation("Instrument");
                });
#pragma warning restore 612, 618
        }
    }
}
